33. go 语言当中数组和切片的区别是什么？
数组：

数组固定长度
数组长度是数组类型的一部分，所以[3]int和[4]int是两种不同的数组类型
数组需要指定大小，不指定也会根据处初始化对的自动推算出大小，不可改变
数组是通过值传递的

切片：
切片可以改变长度
切片是轻量级的数据结构，三个属性，指针，长度，容量
不需要指定大小
切片是地址传递（引用传递）
可以通过数组来初始化，也可以通过内置函数make()来初始化，初始化的时候len=cap，然后进行扩容



引用与指针的区别

相同点：
都是地址的概念，都是地址传递

区别：
引用必须初始化，指针可以不初始化


一种方式是看 * 和 const 的排列顺序，比如
int const* p;	//const * 即常量指针
const int* p;	//const * 即常量指针
int* const p;	//* const 即指针常量

还一种方式是看const离谁近，即从右往左看，比如
int const* p;	//const修饰的是*p，即*p的内容不可通过p改变，但p不是const，p可以修改，*p不可修改；
const int* p;	//同上
int* const p;	//const修饰的是p，p是指针，p指向的地址不能修改，p不能修改，但*p可以修改；

指针常量（引用）
int* const p;
*在const前面
p这个地址是常量，不允许改变，但是*p可以改变

常量指针
int const *p;  const int* p;
*在常量后面
*p是常量，*p不允许改变，p允许改变


指向常量的常指针
const int* const p;
*p和p都不允许改变。



go 中 make和new的区别
new和make都在堆上分配内存，但是它们的行为不同，适用于不同的类型

new 分配一块内存,初始化为0并返回内存的地址
它适用于值类型如数组和结构体

make 分配一块内存，返回一个实体。
只适用于创建slice, map, channel。




go中channel,slice,map都是引用类型

所以channel,slice,map只能用make，不能用new



良好的编码习惯（单元测试go convey，pprof测试性能）
telegraf,prometheus,